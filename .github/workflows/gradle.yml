name: Java CI CD with Gradle AND Docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: make application-deploy.yaml
      run: |
        cd ./src/main/resources
        touch ./application-deploy.yaml
        echo "${{ secrets.DEPOLY_YAML }}" > ./application-deploy.yaml

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      with:
        gradle-version: '8.9'
    - name: Grant execute permission for gradlew
      run: sudo chmod +x gradlew
      
    - name: Build JAR
      run: sudo ./gradlew bootJar -x test
    - name: 디렉토리 구조 확인
      run: ls -R
    - name: Check JAR exists
      run: ls -alh build/libs

#  docker:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v4
#    - name: Login to Docker Hub
#      uses: docker/login-action@v3
#      with:
#        username: ${{ secrets.DOCKER_USERNAME }}
#        password: ${{ secrets.DOCKER_PASSWORD }}
#
#    - name: Build and Push Docker Image
#      uses: docker/build-push-action@v5
#      with:
#        context: .
#        file: ./Dockerfile
#        push: true
#        tags: ${{ secrets.DOCKER_USERNAME }}/web-app:0.0.1
#        platforms: linux/amd64

#  deploy:
#    needs: docker
#    runs-on: ubuntu-latest
#
#    steps:
    - name: Docker build
      run: |
        # Docker Hub 로그인
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

        # Docker 이미지 빌드
        docker buildx build --platform linux/amd64 \-t ${{ secrets.DOCKER_USERNAME }}/web-app:0.0.1 \--push .

    - name: Restore PEM key
      run: |
        echo "${{ secrets.EC2_KEY }}" | base64 -d > key.pem
        chmod 400 key.pem

    - name: Deploy on EC2 via SSH
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.EC2_HOST }} << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/web-app:0.0.1
          sudo docker stop web-app || true
          sudo docker rm web-app || true
          docker run -d -p 80:80 --name web-app  ${{ secrets.DOCKER_USERNAME }}/web-app:0.0.1
        EOF
